// --- START OF FILE ErrorFixer.cs --- AJUSTE FINAL PARSEO RUTAS

using Shared;
using System.Text.Json;
using Microsoft.Extensions.Logging;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using System.IO;

namespace Infraestructura
{
    public class ErrorFixer : IErrorFixer
    {
        private readonly GeminiClient _gemini;
        private readonly ILogger<ErrorFixer> _logger;
        private const int MaxGlobalErrorChars = 20000;
        private const int MaxLinesPerFile = 50; // Max lines from error log per file

        private readonly CorrectedErrorsStore _store;

        private static readonly Regex ErrorPathRegex = new Regex(
             @"^\s*(?<path>(?:[a-zA-Z]:\\|\/)?(?:[\w\-\.\s\\\/()]+?)\.(cs|razor|cshtml|csproj))\((?<line>\d+)[,;](?<col>\d+)\):\s*(error|warning)\s+(?<code>\w+):",
             RegexOptions.Multiline | RegexOptions.IgnoreCase | RegexOptions.Compiled);

        public ErrorFixer(GeminiClient gemini, ILogger<ErrorFixer> logger, CorrectedErrorsStore store)
        {
            _gemini = gemini;
            _logger = logger;
            _store = store;
        }

        public async Task<List<string>> CorregirErroresDeCompilacionAsync(string rutaProyecto)
        {
            var errorLogPath = Path.Combine(rutaProyecto, "build_errors.log");
            _logger.LogInformation("üîç Buscando build_errors.log en: {Path} (Existe? {Exists})",
                errorLogPath, File.Exists(errorLogPath));

            if (!File.Exists(errorLogPath)) { _logger.LogInformation("No se encontr√≥ build_errors.log."); return new List<string>(); }

            string rawErrors;
            try { rawErrors = await File.ReadAllTextAsync(errorLogPath); }
            catch (Exception ex) { _logger.LogError(ex, "Error al leer el archivo de log de errores: {LogPath}", errorLogPath); return new List<string>(); }

            var erroresLogCompleto = rawErrors.Length > MaxGlobalErrorChars ? rawErrors.Substring(0, MaxGlobalErrorChars) + "\n... (log truncado) ..." : rawErrors;

            var archivosConErrores = InferirArchivosFallados(erroresLogCompleto, rutaProyecto);
            _logger.LogInformation("üìë Archivos detectados con errores: {Count}", archivosConErrores.Count);

            if (archivosConErrores.Count == 0) { _logger.LogWarning("No se detectaron archivos espec√≠ficos con errores en {LogPath}, aunque el log existe.", errorLogPath); return new List<string>(); }

            var corregidos = new List<string>();

            foreach (var filePath in archivosConErrores) // filePath is the full path to the file with errors
            {
                if (!IsPathPotentiallyValid(filePath)) { _logger.LogWarning("Omitiendo ruta de archivo inv√°lida o sospechosa detectada: {File}", filePath); continue; }

                string codigoOriginal;
                try
                {
                    codigoOriginal = await File.ReadAllTextAsync(filePath);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error al leer el contenido del archivo {File}. Omitiendo correcci√≥n.", filePath);
                    continue;
                }

                var errorMessagesParaArchivo = ExtraerErroresDelArchivo(erroresLogCompleto, filePath)
                                              .Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                                              .ToList();

                if (!errorMessagesParaArchivo.Any())
                {
                    _logger.LogWarning("No se extrajeron mensajes de error espec√≠ficos para el archivo {File}, aunque fue listado. Omitiendo.", filePath);
                    continue;
                }

                string errorSnippetKey = string.Join(Environment.NewLine, errorMessagesParaArchivo);
                if (_store.WasCorrected(filePath, errorSnippetKey))
                {
                    _logger.LogInformation("‚è≠ Ya corregido antes (mismo snippet de errores): {File}", Path.GetFileName(filePath));
                    continue;
                }

                _logger.LogInformation("üõ† Intentando corregir archivo: {File}", filePath);
                var prompt = CrearPromptParaCorregirError(codigoOriginal, Path.GetFileName(filePath), errorMessagesParaArchivo, null);
                string codigoCorregido;
                try
                {
                    codigoCorregido = await _gemini.GenerarAsync(prompt);
                    codigoCorregido = LimpiarCodigoGemini(codigoCorregido);
                }
                catch (System.Exception ex)
                {
                    _logger.LogError(ex, "‚ùå Error llamando a Gemini para corregir {File}", Path.GetFileName(filePath));
                    if (ex.Message.Contains("429") || ex.Message.Contains("RESOURCE_EXHAUSTED")) { _logger.LogError(">>> L√≠mite de cuota de API alcanzado. Abortando correcciones para este ciclo. <<<"); break; }
                    continue;
                }
                if (string.IsNullOrWhiteSpace(codigoCorregido)) { _logger.LogWarning("‚ö†Ô∏è Gemini devolvi√≥ contenido vac√≠o al intentar corregir {File}. No se aplicar√° correcci√≥n.", Path.GetFileName(filePath)); continue; }

                try
                {
                    if (!IsPathWritable(filePath, rutaProyecto)) { _logger.LogError("‚ùå Permiso denegado o ruta inv√°lida detectada ANTES de escribir correcci√≥n en: {File}. Omitiendo.", filePath); continue; }
                    _logger.LogDebug("Escribiendo correcci√≥n (Longitud: {Length}) en: {File}", codigoCorregido.Length, filePath);
                    await File.WriteAllTextAsync(filePath, codigoCorregido);
                    _store.MarkCorrected(filePath, errorSnippetKey);
                    corregidos.Add(filePath);
                    _logger.LogInformation("‚úÖ Archivo corregido y escrito: {File}", Path.GetFileName(filePath));
                }
                catch (UnauthorizedAccessException uaEx) { _logger.LogError(uaEx, "‚ùå Permiso DENEGADO al escribir correcci√≥n en: {File}", filePath); }
                catch (DirectoryNotFoundException dnfEx) { _logger.LogError(dnfEx, "‚ùå Directorio no encontrado al intentar escribir correcci√≥n en: {File}", filePath); }
                catch (IOException ioEx) { _logger.LogError(ioEx, "‚ùå Error de I/O al escribir correcci√≥n en: {File}", filePath); }
                catch (Exception ex) { _logger.LogError(ex, "‚ùå Error inesperado al escribir correcci√≥n en: {File}", filePath); }
            }
            return corregidos;
        }

        private List<string> InferirArchivosFallados(string errorLogContent, string projectRootPath)
        {
            var failedFiles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            var projectFileName = Path.GetFileName(projectRootPath);
            var projectFilePath = Path.Combine(projectRootPath, $"{projectFileName}.csproj");
            if (!File.Exists(projectFilePath))
            {
                string? parentDir = Path.GetDirectoryName(projectRootPath);
                if(parentDir != null && Directory.Exists(parentDir)) projectRootPath = parentDir;
                 projectFilePath = Directory.GetFiles(projectRootPath, "*.csproj").FirstOrDefault() ?? projectFilePath;
            }

            var fullProjectRootPath = Path.GetFullPath(projectRootPath);

            foreach (Match match in ErrorPathRegex.Matches(errorLogContent))
            {
                var pathPart = match.Groups["path"].Value.Trim();

                if (string.IsNullOrWhiteSpace(pathPart) || pathPart.IndexOfAny(Path.GetInvalidPathChars()) >= 0)
                {
                    _logger.LogWarning("Ignorando ruta potencialmente inv√°lida capturada por Regex: '{PathPart}'", pathPart);
                    continue;
                }

                pathPart = pathPart.Replace('/', Path.DirectorySeparatorChar).Replace('\\', Path.DirectorySeparatorChar);

                string fullPath;
                try
                {
                    if (Path.IsPathRooted(pathPart) && File.Exists(pathPart))
                    {
                        fullPath = Path.GetFullPath(pathPart);
                    }
                    else
                    {
                         fullPath = Path.GetFullPath(Path.Combine(fullProjectRootPath, pathPart));
                    }

                    if (!fullPath.StartsWith(fullProjectRootPath, StringComparison.OrdinalIgnoreCase) &&
                        !fullPath.Equals(Path.GetFullPath(projectFilePath), StringComparison.OrdinalIgnoreCase))
                    {
                        _logger.LogDebug("Ignorando ruta resuelta fuera del proyecto: {FullPath} (Ra√≠z: {ProjectRoot})", fullPath, fullProjectRootPath);
                        continue;
                    }
                }
                catch (Exception ex) { _logger.LogWarning(ex, "Error al procesar/combinar la ruta del log: '{PathPart}'. Omitiendo.", pathPart); continue; }

                if (fullPath.Contains(Path.Combine("dotnet", "sdk"), StringComparison.OrdinalIgnoreCase) ||
                    fullPath.Contains(Path.DirectorySeparatorChar + "obj" + Path.DirectorySeparatorChar) ||
                    fullPath.Contains(Path.DirectorySeparatorChar + "bin" + Path.DirectorySeparatorChar))
                {
                    _logger.LogDebug("Ignorando ruta en SDK, obj o bin: {FullPath}", fullPath);
                    continue;
                }

                if (File.Exists(fullPath))
                {
                    failedFiles.Add(fullPath);
                    _logger.LogTrace("Archivo de error detectado y validado: {FullPath}", fullPath);
                }
                else { _logger.LogWarning("Archivo de error referenciado en log no encontrado en disco: {FullPath}", fullPath); }
            }

            if (errorLogContent.Contains("error NETSDK", StringComparison.OrdinalIgnoreCase))
            {
                if (File.Exists(projectFilePath)) { _logger.LogWarning("Error del SDK (NETSDKxxxx) detectado. Asociando error al archivo .csproj: {ProjectFile}", projectFilePath); failedFiles.Add(projectFilePath); }
                else { _logger.LogError("Se detect√≥ un error NETSDK pero no se encontr√≥ el archivo .csproj esperado en {ProjectFile}", projectFilePath); }
            }

            if (!failedFiles.Any() && !string.IsNullOrWhiteSpace(errorLogContent) && !(errorLogContent.Contains("Build Succeeded") || errorLogContent.Contains("Build succeeded.")))
            { _logger.LogWarning("No se pudo extraer ninguna ruta de archivo espec√≠fica del log de errores, aunque contiene errores."); }

            return failedFiles.ToList();
        }

        private string ExtraerErroresDelArchivo(string fullErrorLog, string targetFilePath)
        {
            string searchKey;
            string targetFileNameOnly = Path.GetFileName(targetFilePath);

            if (targetFilePath.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase))
            {
                searchKey = targetFileNameOnly;
            }
            else
            {
                try
                {
                    string? projectRootAttempt = Path.GetDirectoryName(targetFilePath);
                    if (projectRootAttempt != null) projectRootAttempt = Path.GetDirectoryName(projectRootAttempt);

                    searchKey = Path.GetRelativePath(projectRootAttempt ?? targetFilePath, targetFilePath);
                    if (string.IsNullOrWhiteSpace(searchKey) || searchKey == "." || searchKey.Contains(".."))
                    {
                        searchKey = targetFileNameOnly;
                    }
                }
                catch
                {
                    searchKey = targetFileNameOnly;
                }
            }

            var relevantLines = fullErrorLog.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                                .Where(line =>
                                    line.IndexOf(searchKey, StringComparison.OrdinalIgnoreCase) >= 0 || // Line contains the file path/name
                                    (targetFilePath.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase) && // OR it's a .csproj file
                                     Regex.IsMatch(line, @"^\s*(error|warning)\s+\w+:") && // AND it's a generic error/warning line
                                     !Regex.IsMatch(line, ErrorPathRegex.ToString()) // AND that line doesn't itself contain a different file path
                                    )
                                )
                                .Take(MaxLinesPerFile)
                                .ToList();

            if (relevantLines.Count == 0 && !targetFilePath.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase))
            {
                _logger.LogWarning("No se encontraron l√≠neas de error espec√≠ficas para el archivo '{SearchKey}' en el log, aunque el archivo fue identificado como contenedor de errores. Se enviar√° un conjunto de errores vac√≠o para este archivo.", searchKey);
                // relevantLines will remain empty.
            }
            return string.Join(Environment.NewLine, relevantLines);
        }

        private string CrearPromptParaCorregirError(string codigoOriginal, string nombreArchivo, List<string> errorMessages, string? projectContext)
        {
            string errorBlock = string.Join(Environment.NewLine, errorMessages.Select(e => $"- {e}"));
            string fileTypeExtension = Path.GetExtension(nombreArchivo).ToLowerInvariant();
            string fileType = fileTypeExtension switch
            {
                ".cs" => "C#",
                ".razor" => "Blazor Razor",
                ".csproj" => "C# Project (.csproj XML)",
                ".cshtml" => "CSHTML",
                _ => "desconocido"
            };
            string langHint = fileTypeExtension switch {
                ".cs" => "csharp",
                ".razor" => "razor",
                ".csproj" => "xml",
                ".cshtml" => "cshtml",
                _ => "plaintext"
            };

            return @$"Eres un experto desarrollador C# y Blazor .NET. Tu tarea es corregir errores de compilaci√≥n en el siguiente archivo.

Nombre del Archivo: {nombreArchivo}
Tipo de Archivo: {fileType}

Contexto General del Proyecto (si est√° disponible):
{projectContext ?? "No hay contexto adicional del proyecto."}

C√≥digo Original con Errores:
```{langHint}
{codigoOriginal}
```

Errores de Compilaci√≥n Reportados (de ""dotnet build""):
{errorBlock}

Instrucciones PRECISAS para la Correcci√≥n:
1.  Analiza CUIDADOSAMENTE los 'Errores de Compilaci√≥n Reportados'. Intenta comprender la causa ra√≠z del error, no solo el s√≠ntoma.
2.  Modifica el 'C√≥digo Original con Errores' √öNICAMENTE para solucionar estos errores espec√≠ficos.
3.  NO realices cambios no solicitados, NO agregues nuevas funcionalidades, y NO refactorices c√≥digo que no est√© directamente relacionado con los errores. El objetivo es una correcci√≥n quir√∫rgica.
4.  Presta atenci√≥n a n√∫meros de l√≠nea o detalles en los mensajes de error si est√°n disponibles y √∫salos para localizar el problema.
5.  Aseg√∫rate de que la sintaxis sea correcta para C# y Blazor (.NET 8).
6.  Devuelve el C√ìDIGO FUENTE COMPLETO y CORREGIDO del archivo '{nombreArchivo}'.
7.  NO incluyas explicaciones, introducciones, res√∫menes de cambios, ni el c√≥digo original sin modificar si no fue necesario.
8.  NO uses bloques de markdown (```) adicionales alrededor del c√≥digo final que devuelves. Solo el contenido puro del archivo corregido.
9.  **An√°lisis Detallado del Error y Soluciones Comunes:**
    *   Si el error indica un `using` faltante, a√±√°delo en la secci√≥n correspondiente al inicio del archivo.
    *   Si es un tipo o miembro no encontrado (ej. CS0246, CS0103, CS0117):
        *   Verifica cuidadosamente errores tipogr√°ficos en el nombre del tipo/miembro.
        *   Considera si es un miembro que falta y necesita una definici√≥n b√°sica (ej. una propiedad `public string Nombre {{ get; set; }}` o un m√©todo `public void Metodo() {{ throw new NotImplementedException(); }}`), especialmente si la clase debe implementar una interfaz que lo requiere. No implementes l√≥gica compleja dentro de estos stubs, solo lo m√≠nimo para que compile.
        *   Aseg√∫rate que el namespace del tipo est√© correctamente importado si el tipo existe en otro namespace del proyecto o una librer√≠a referenciada.
    *   Para errores de conversi√≥n de tipos (ej. CS0029 ""No se puede convertir impl√≠citamente el tipo X a Y""): Intenta una conversi√≥n expl√≠cita (ej. `(Y)miVariableX`) o usa m√©todos de parseo/conversi√≥n est√°ndar (ej. `int.Parse(miString)`, `miObjeto.ToString()`) si el contexto es claro y la conversi√≥n es segura.
    *   Para variables no asignadas (ej. CS0165 ""Uso de la variable local no asignada..."") o potenciales problemas de referencia nula con variables locales: Considera inicializarlas a un valor por defecto apropiado (ej. `string x = string.Empty;`, `List<MiTipo> items = new List<MiTipo>();`, `MiClase? obj = null;` si es anulable). Aplica esto con cautela.
    *   Para problemas de scope (ej. CS0103 ""El nombre 'variable' no existe en el contexto actual""): Verifica si la variable fue definida en un scope diferente (ej. dentro de un `if` o `using` block) y si necesita ser declarada en un scope m√°s amplio, o pasada como par√°metro.
10. **Resoluci√≥n Cautelosa e Iterativa (Mentalmente):**
    *   Si hay m√∫ltiples errores, mentalmente considera c√≥mo la correcci√≥n de uno podr√≠a afectar a otros. El objetivo es una soluci√≥n integral.
    *   Aplica los cambios m√≠nimos necesarios para corregir los errores reportados.
    *   Si un error es ambiguo, o si la correcci√≥n podr√≠a tener efectos secundarios no deseados o requiere l√≥gica compleja que no puedes inferir con seguridad, es PREFERIBLE dejar un comentario explicativo en el c√≥digo (ej. `// ErrorFixer: No se pudo corregir autom√°ticamente [descripci√≥n del problema]. Se necesita revisi√≥n humana.`) y DEVOLVER EL C√ìDIGO CON ESE COMENTARIO en lugar de hacer un cambio arriesgado.
    *   Si puedes corregir algunos errores pero otros son ambiguos, corrige los que puedas y comenta los dem√°s.

IMPORTANTE: El objetivo es que el archivo resultante compile correctamente.
";
        }

        private string LimpiarCodigoGemini(string codigo)
        {
            if (string.IsNullOrWhiteSpace(codigo)) return "";
            var lines = codigo.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None).ToList();
            if (lines.Any() && lines[0].Trim().StartsWith("```")) { lines.RemoveAt(0); }
            if (lines.Any() && lines.Last().Trim() == "```") { lines.RemoveAt(lines.Count - 1); }

            string[] commonPhrases = {
                "here's the code", "here is the code", "okay, here is the", "sure, here is the", "certainly, here is the",
                "this is the code", "the code is as follows", "find the code below", "below is the code",
                "this code should work", "let me know if you have questions", "hope this helps", "hope this is helpful",
                "this is just an example", "you might need to adjust this", "this implements", "this file contains",
                "the generated code:", "generated code:", "code:", "c# code:", "razor code:", "html code:",
                "```csharp", "```c#", "```razor", "```html", "```xml", "```json",
                "here is the updated code", "here's the updated code", "this is the modified code",
                "i've made the requested changes", "the changes are as follows"
            };

            for (int i = 0; i < 3 && lines.Any(); i++)
            {
                var trimmedLowerLine = lines[0].Trim().ToLowerInvariant();
                bool removed = false;
                foreach (var phrase in commonPhrases)
                {
                    if (trimmedLowerLine.StartsWith(phrase))
                    {
                        _logger.LogTrace("LimpiarCodigoGemini (ErrorFixer): Removiendo l√≠nea introductoria: '{Line}'", lines[0]);
                        lines.RemoveAt(0);
                        removed = true;
                        break;
                    }
                }
                if (!removed) break;
            }

            for (int i = 0; i < 3 && lines.Any(); i++)
            {
                var trimmedLowerLine = lines.Last().Trim().ToLowerInvariant();
                 bool removed = false;
                foreach (var phrase in commonPhrases)
                {
                    if (trimmedLowerLine.EndsWith(phrase) || trimmedLowerLine == phrase)
                    {
                        _logger.LogTrace("LimpiarCodigoGemini (ErrorFixer): Removiendo l√≠nea conclusiva: '{Line}'", lines.Last());
                        lines.RemoveAt(lines.Count - 1);
                        removed = true;
                        break;
                    }
                }
                 if (!removed) break;
            }

            var processedLines = lines.Select(l => l.TrimEnd()).ToList();
            while (processedLines.Any() && string.IsNullOrWhiteSpace(processedLines[0]))
            {
                processedLines.RemoveAt(0);
            }
            while (processedLines.Any() && string.IsNullOrWhiteSpace(processedLines.Last()))
            {
                processedLines.RemoveAt(processedLines.Count - 1);
            }

            return string.Join(Environment.NewLine, processedLines).Trim();
        }
        private bool IsPathPotentiallyValid(string? filePath) { return !string.IsNullOrWhiteSpace(filePath); }
        private bool IsPathWritable(string filePath, string projectRootPath) { if (!IsPathPotentiallyValid(filePath)) return false; try { string fullPath = Path.GetFullPath(filePath); string fullProjectRootPath = Path.GetFullPath(projectRootPath); if (!fullPath.StartsWith(fullProjectRootPath, StringComparison.OrdinalIgnoreCase)) { _logger.LogWarning("Attempted to write outside project directory: {FullPath}", fullPath); return false; } string[] protectedPaths = { Path.Combine("C:", "Program Files"), Path.Combine("C:", "Program Files (x86)"), Path.Combine("C:", "Windows"), "/usr/bin", "/usr/sbin", "/bin", "/sbin", "/etc", Path.Combine("dotnet", "sdk") }; if (protectedPaths.Any(p => fullPath.Contains(p, StringComparison.OrdinalIgnoreCase))) { _logger.LogWarning("Attempted to write to a potentially protected system path: {FullPath}", fullPath); return false; } string? directory = Path.GetDirectoryName(fullPath); if (directory == null || !Directory.Exists(directory)) { _logger.LogWarning("Target directory for writing does not exist: {Directory}", directory ?? "N/A"); return false; } return true; } catch (Exception ex) { _logger.LogWarning(ex, "Exception while checking if path is writable: {FilePath}", filePath); return false; } }

        #endregion

    }
}